{
    "ScriptTemplate":  "\n##Auto-Generated using \"PSProject Builder\" Created by Matt Hamende 2018\n#######################################################################\n#Description: generates wireframe powershell projects\n#Features:\n## Define ScriptRoot\n## Standard Function Libraries\n## PSModule Prerequities Loader\n## JSON Config File\n########################################################################\n\n#Set Default Error Handling - Set to Continue for Production\n$ErrorActionPreference = \"Stop\"\n\n#Define Logger Function\nFunction Log($message) {\n    \"$(Get-Date -Format u) | $message\"\n}\n\n#Define Script Root for relative paths\n$RunDir = split-path -parent $MyInvocation.MyCommand.Definition\nLog \"Setting Location to: $RunDir\"\nSet-Location $RunDir # Sets directory\n\n#Imports Function Library\nLog \"Importing Modules\"\nTry {\n    Remove-Module Functions -ErrorAction SilentlyContinue\n}\nCatch {}\nTry {\n    Import-Module \"$RunDir\\Modules\\Functions.psm1\" -DisableNameChecking -ErrorAction SilentlyContinue\n}\nCatch { $_ }\n\n#Load Config\nLog \"Loading Config\"\n$Config = (Get-Content \"$RunDir\\config.json\") -join \"`n\" | ConvertFrom-Json\n\n#Load Prerequisites\nPrereqs -config $Config\n\n## Script Below this line #######################################################",
    "FunctionsTemplate":  "\n#Library of Functions related to Cross Reference Rebuild\n\n#Parses tabs from Excel file and converts to CSV for import into PowerShell\nFunction ExportWSToCSV ($excelFile, $csvLoc) {\n    $excelFile\n    $E = New-Object -ComObject Excel.Application\n    $E.Visible = $false\n    $E.DisplayAlerts = $false\n    $wb = $E.Workbooks.Open($excelFile.FullName)\n    foreach ($ws in $wb.Worksheets) {\n        $n = $ws.Name\n        \"Saving to: $csvLoc\\$($excelFile.BaseName)_$n.csv\"\n        $ws.SaveAs(\"$csvLoc\\$($excelFile.BaseName)_$n.csv\", 6)\n    }\n\n    $E.Quit()\n}\n\nExport-ModuleMember ExportWSToCSV\n\nFunction CreateInsertRow ($Row, $Index, $SiteName) {\n    $Ext = $Index[$Row.Full_Path]\n    $Insert = @\"\n        `r\n        --Internal:$($row.Device_Sensor_ID)\n        --External: $($Ext.Device_Sensor_ID)\n        --Path: $($row.Full_Path)\n        INSERT INTO [dbo].[External_Device_Sensor_Xref]\n           ([Device_Sensor_ID]\n           ,[External_Device_Sensor_ID]\n           ,[Last_Updated_By]\n           ,[Last_Update_Date]\n           ,[Site_Name]\n           ,[Last_Updated_Document_ID])\n        VALUES\n           (\u0027$($row.Device_Sensor_ID)\u0027\n           ,\u0027$($Ext.Device_Sensor_ID)\u0027\n           ,616\n           ,SYSUTCDATETIME()\n           ,\u0027$($SiteName)\u0027\n           ,NULL)\n    GO\n\"@\n    $Insert\n}\n\nExport-ModuleMember CreateInsertRow\n\nFunction SQLQuery($query, $dbconfig) {    \n    #Determines if Credentials are implicit or explict and creates cred object\n    if ($dbconfig.user.length -ge 1) {\n        $pass = ConvertTo-SecureString $dbconfig.pass -AsPlainText -Force\n        $cred = New-Object System.Management.Automation.PSCredential(\n            $dbconfig.user, \n            $pass\n        )\n    }\n\n    $Database = $dbconfig.Database\n    $ServerInstance = $dbconfig.ServerInstance\n\n    if ($cred) {\n        $Params = @{\n            Database       = $Database\n            ServerInstance = $ServerInstance\n            QueryTimeout   = 60        \n            #OutputSqlErrors = $true\n            Query          = $query\n            Username       = $dbconfig.user\n            Password       = $dbconfig.pass\n\n        }\n    }\n    else {\n        $Params = @{\n            Database       = $Database\n            ServerInstance = $ServerInstance\n            QueryTimeout   = 60        \n            #OutputSqlErrors = $true\n            Query          = $query\n        }\n    }\n    Try {\n        Invoke-Sqlcmd2 @Params\n    }\n    Catch {\n        Write-Host \"Error Executing SQL Query : `n `n Database: $($Database) `n ServerInstance: $($ServerInstance) `n `n $($query) `n\" \n        Write-Error $_ -ErrorAction Stop \n    }\n}\n\nExport-ModuleMember SQLQuery\n\nFunction CPPQuery () {\n    $Query = @\"\nSELECT\nCPP.*\nFROM dbo.Cache_Partition_Paths CPP\n    INNER JOIN dbo.Device_Sensors DS\n    ON DS.Device_Sensor_ID = CPP.Device_Sensor_ID\n        AND CPP.Path_Type = 0\nWHERE DS.Is_Deleted = 0\n\"@\n    $Query\n}\n\nExport-ModuleMember CPPQuery\n\nFunction XREFQuery () {\n    $Query = @\"\n    SELECT *\n    FROM dbo.External_Device_Sensor_Xref    \n\"@\n    $Query\n}\n\nExport-ModuleMember XREFQuery\n\nFunction LocationsQuery () {\n    $Query = @\"\n    SELECT *\n    FROM dbo.Locations\n\"@\n    $Query\n}\n\nExport-ModuleMember LocationsQuery\n\nFunction DSQuery ($partitions) {\n    $Query = @\"\n    SELECT DS.*\n    FROM dbo.Device_Sensors DS\n    INNER JOIN dbo.Devices D\n        ON DS.Device_ID = D.Device_ID\n    INNER JOIN dbo.Partitions P \n        ON D.Partition_ID = P.Partition_ID\n    INNER JOIN dbo.Partition_Transitive_Closure PTC \n        ON P.Parent_Partition_ID = PTC.Child_Partition_ID\n    WHERE DS.Is_Deleted = 0\n    AND PTC.Parent_Partition_ID IN ($partitions)    \n\"@\n    $Query\n}\n\nExport-ModuleMember DSQuery\n\nFunction Prereqs ($config) {\n    $Repository = $config.PSModule.Repository\n    Try {\n        $Ping = $null\n        $Ping = (Invoke-WebRequest -Uri $Repository).StatusCode\n    }\n    Catch { $Ping = $_ }\n    $Modules = $config.PSModule.Modules\n    \n    if ($Ping.GetType().name -eq \"ErrorRecord\" -or $PSVersionTable.PSVersion.Major -lt 5) {\n        Write-Host -ForegroundColor Cyan \"Error Encountered Connecting to Repository : $Repository\"\n        Write-Host -ForegroundColor Red $Ping.Exception\n        \"\"\n        \n        if (Test-Path -Path \".\\modules\") {\n            $modulepath = \";$scriptDir\\modules\"\n            if(-not ($env:PSModulePath -like $modulepath)){\n                Write-Host \"adding  to PSModulePath\"\n                $env:PSModulePath += $modulepath\n            }\n\n            Write-Host \"Attempting to Load Modules from .\\modules ...\"\n\n            ForEach ($Module in $Modules) {\n                $installed = Get-Module -ListAvailable -Name $Module\n                $loaded = Get-Module -Name $Module\n                if ($installed -and $loaded) {\n                    Write-Host -ForegroundColor Cyan \"Module: $Module - Already Loaded\"\n                }\n                else {\n                    Write-Host -ForegroundColor Green \"Module: $Module - Loading...\"\n                    Try {\n                        Remove-Module $Module -Force -ErrorAction SilentlyContinue\n                        Import-Module  \".\\modules\\$Module\\$module.ps1\"                                              \n                    }\n                    Catch {\n                        Try {\n                            Remove-Module $Module -Force -ErrorAction SilentlyContinue\n                            Import-Module  \".\\modules\\$Module\" \n                        }\n                        Catch {$_}      \n                    }\n                    Get-Module $Module\n                }\n            }\n        }\n\n    }\n    elseif ($Modules -eq $null -or $Modules.Count -le 0) {\n        Write-Host -ForegroundColor Cyan \"Error No Modules Listed in Config\"\n    }\n    else {\n        ForEach ($Module in $Modules) {\n            $installed = Get-Module -ListAvailable -Name $Module\n            $loaded = Get-Module -Name $Module\n            if ($installed -and $loaded) {\n                Write-Host -ForegroundColor Cyan \"Module: $Module - Already Loaded\"\n            }\n            elseif ($installed -and $loaded -ne $true) {\n                Write-Host -ForegroundColor Green \"Module: $Module - Loading...\"\n                Import-Module $Module\n                Get-Module $Module\n            }\n            else {\n                Write-Host -ForegroundColor Yellow \"Module: $Module - Installing...\"\n                Install-Module $Module -Force -Repository PSGallery -Confirm:$false\n                Import-Module $Module\n                Get-Module $Module\n            }\n        }        \n    }\n    \"\"\n}\n\nExport-ModuleMember Prereqs\n\nFunction Merge-CSVFiles($CSVPath, $XLOutput) {\n    $csvFiles = Get-ChildItem (\"$CSVPath\\*\") -Include *.csv | Sort-Object -Descending\n    $Excel = New-Object -ComObject excel.application \n    $Excel.visible = $false\n    $Excel.sheetsInNewWorkbook = $csvFiles.Count\n    $workbooks = $excel.Workbooks.Add()\n    $CSVSheet = 1\n\n    Foreach ($CSV in $Csvfiles) {\n        $worksheets = $workbooks.worksheets\n        $CSVFullPath = $CSV.FullName\n        $SheetName = ($CSV.name -split \"\\.\")[0]\n        $worksheet = $worksheets.Item($CSVSheet)\n        $worksheet.Name = $SheetName\n        $TxtConnector = (\"TEXT;\" + $CSVFullPath)\n        Log \"Merging Worksheet $SheetName\"\n        $CellRef = $worksheet.Range(\"A1\")\n        $Connector = $worksheet.QueryTables.add($TxtConnector, $CellRef)\n        $worksheet.QueryTables.item($Connector.name).TextFileCommaDelimiter = $True\n        $worksheet.QueryTables.item($Connector.name).TextFileParseType = 1\n        $worksheet.QueryTables.item($Connector.name).Refresh() | Out-Null\n        $worksheet.QueryTables.item($Connector.name).delete()\n        $worksheet.UsedRange.EntireColumn.AutoFit() | Out-Null\n        $CSVSheet++\n    }\n\n    $workbooks.SaveAs($XLOutput, 51)\n    $workbooks.Saved = $true\n    $workbooks.Close()\n    [System.Runtime.Interopservices.Marshal]::ReleaseComObject($workbooks) | Out-Null\n    $excel.Quit()\n    [System.Runtime.Interopservices.Marshal]::ReleaseComObject($excel) | Out-Null\n    [System.GC]::Collect()\n    [System.GC]::WaitForPendingFinalizers()\n}\n\nExport-ModuleMember Merge-CSVFiles\n\nFunction ExportWSToCSV ($excelFile, $csvLoc) {\n    $E = New-Object -ComObject Excel.Application\n    $E.Visible = $false\n    $E.DisplayAlerts = $false\n    $wb = $E.Workbooks.Open($excelFile.FullName)\n    foreach ($ws in $wb.Worksheets) {\n        $n = $ws.Name\n        \"Saving to: .\\$((get-item $csvLoc).name)\\$($excelfile.Basename)_$n.csv\"\n        $ws.SaveAs(\"$csvLoc\\$($excelfile.Basename)_$n.csv\", 6)\n    }\n    \"\"\n    $E.Quit()\n}\n\nExport-ModuleMember ExportWSToCSV\n\nFunction LoginUser ($config) {\n    $user = $config.username\n    $password = $config.password\n    $URI = \"$($config.WebHost)/$($config.LoginMethod)\"\n    $provider = Get-NetIPInterface | Where-Object { \n        $_.ConnectionState -eq \"Connected\" \n    } | Sort-Object InterfaceMetric | Select-Object -First 1\n    $adapter = Get-NetAdapter | Where-Object { \n        $_.IfIndex -eq $Provider.IfIndex \n    }\n    $JSON = $Config.JSONLoginUser\n    $JSON.LoginName = $user\n    $JSON.Password = $password\n    $JSON.Environment = $config.Environment\n    $JSON.AppID = $config.AppID\n    $JSON.MacAddresses = $adapter.MacAddress\n    $JSON.ComputerName = $env:COMPUTERNAME\n    $JSON.UserAgent = [System.Environment]::OSVersion.VersionString\n\n    $params = @{\n        Uri         = $URI\n        Method      = \"Post\"\n        Body        = ($JSON | ConvertTo-Json)\n        ContentType = \"application/json; charset=utf-8\"\n        ErrorAction = \"Inquire\"\n    }\n\n    Invoke-RestMethod @params\n}\n\nExport-ModuleMember LoginUser\n\nFunction GetSelectMethod ($config, $user, $service, $method) {\n    $URI = \"$($config.WebHost)/$($service)$($method)\"\n    $JSON = $config.JSONSelectMethod\n    $JSON.Ticket = $user.Ticket\n    $JSON.LoginID = $user.Login_ID\n    $JSON.Environment = $config.Environment\n    $JSON.AppID = $config.AppID\n\n    $params = @{\n        Uri         = $URI\n        Method      = \"Post\"\n        Body        = ($JSON | ConvertTo-Json)\n        ContentType = \"application/json; charset=utf-8\"\n        ErrorAction = \"Inquire\"\n    }\n\n    Invoke-RestMethod @params\n}\n\nExport-ModuleMember GetSelectMethod\n\nFunction GetSensor ($config, $user, $sensor) {\n    $service = $config.DeviceMethod\n    $method = \"SELECT_713\"\n    $URI = \"$($config.WebHost)/$($service)$($method)\"\n    $JSON = $config.JSONSelectMethod\n    $JSON.Ticket = $user.Ticket\n    $JSON.LoginID = $user.Login_ID\n    $JSON.Environment = $config.Environment\n    $JSON.AppID = $config.AppID\n    $JSON | Add-Member sensorID($sensor)\n\n    $params = @{\n        Uri         = $URI\n        Method      = \"Post\"\n        Body        = ($JSON | ConvertTo-Json)\n        ContentType = \"application/json; charset=utf-8\"\n        ErrorAction = \"Inquire\"\n    }\n\n    Invoke-RestMethod @params\n}\n\nExport-ModuleMember GetSensor\n\n\nFunction GetPartition ($config, $user, $partition) {\n    $service = $config.PartitionMethod\n    $method = \"SELECT_103\"\n    $URI = \"$($config.WebHost)/$($service)$($method)\"\n    $JSON = $config.JSONSelectMethod\n    $JSON.Ticket = $user.Ticket\n    $JSON.LoginID = $user.Login_ID\n    $JSON.Environment = $config.Environment\n    $JSON.AppID = $config.AppID\n    $JSON | Add-Member partitionID($partition) -Force\n\n    $params = @{\n        Uri         = $URI\n        Method      = \"Post\"\n        Body        = ($JSON | ConvertTo-Json)\n        ContentType = \"application/json; charset=utf-8\"\n        ErrorAction = \"Inquire\"\n    }\n\n    Invoke-RestMethod @params\n}\n\nExport-ModuleMember GetPartition\n\nFunction GetDevices ($config, $user, $partition) {\n    $Service = $config.DeviceMethod\n    $Method = \"SELECT_15003\"\n    $URI = \"$($config.WebHost)/$($service)$($method)\"\n    $JSON = $config.JSONSelectMethod\n    $JSON.Ticket = $user.Ticket\n    $JSON.LoginID = $user.Login_ID\n    $JSON.Environment = $config.Environment\n    $JSON.AppID = $config.AppID\n    $JSON | Add-Member -NotePropertyName \"partitionID\" -NotePropertyValue $partition -Force\n\n    $params = @{\n        Uri         = $URI\n        Method      = \"Post\"\n        Body        = ($JSON | ConvertTo-Json)\n        ContentType = \"application/json; charset=utf-8\"\n        ErrorAction = \"Inquire\"\n    }\n\n    Invoke-RestMethod @params\n}\n\nExport-ModuleMember GetDevices\n\nFunction GetDeviceProperties ($config, $user, $deviceID) {\n    $Service = $config.DeviceMethod\n    $Method = \"SELECT_181\"\n    $URI = \"$($config.WebHost)/$($service)$($method)\"\n    $JSON = $config.JSONSelectMethod\n    $JSON.Ticket = $user.Ticket\n    $JSON.LoginID = $user.Login_ID\n    $JSON.Environment = $config.Environment\n    $JSON.AppID = $config.AppID\n    $JSON | Add-Member -NotePropertyName \"deviceID\" -NotePropertyValue $deviceID -Force\n\n    $params = @{\n        Uri         = $URI\n        Method      = \"Post\"\n        Body        = ($JSON | ConvertTo-Json)\n        ContentType = \"application/json; charset=utf-8\"\n        ErrorAction = \"Inquire\"\n    }\n\n    Invoke-RestMethod @params\n}\n\nExport-ModuleMember GetDeviceProperties\n\nFunction SetSensorType ($data, $config, $user) {\n    #To do add logic to determine if sensor type cd is present in template\n    $service = $config.DeviceMethod\n    if ($data.Sensor_Type_CD -eq $Null -or $data.Sensor_Type_CD -eq \"NULL\") {\n        $IsNew = $true\n        $method = \"AddDeviceSensorType\"\n        $data.Sensor_Type_CD = 0\n    }\n    else {\n        $IsNew = $false\n        $method = \"ModifyDeviceSensorType\"\n    }\n    #Set Rest connection params\n    $URI = \"$($config.WebHost)/$($service)$($method)\"\n    $JSON = $config.JSONSetSensorType\n    $JSON.Ticket = $user.Ticket\n    $JSON.LoginID = $user.Login_ID\n    $JSON.Environment = $config.Environment\n    $JSON.AppID = $config.AppID\n    #Set Poco properties from template\n    $JSON.poco.Sensor_Type_CD = if ($data.Sensor_Type_CD -eq $Null -or\n        $data.Sensor_Type_CD -eq \"NULL\") {\n        0\n    }\n    else {$data.Sensor_Type_CD}\n    $JSON.poco.Device_Type_CD = [int]$data.Device_Type_CD\n    $JSON.poco.Sensor_Name = $data.Sensor_Name\n    $JSON.poco.Sensor_Short_Name = $data.Sensor_Short_Name\n    if ($JSON.poco.Sensor_Short_Name.length -gt 15){\n        Write-Host -ForegroundColor Yellow \"Sensor_Short_Name: [$($data.Sensor_Short_Name)]LEN($($data.Sensor_Short_Name.length)) exceeds 15 char\"\n        Write-Error \"Sensor_Short_Name: [$($data.Sensor_Short_Name)]LEN($($data.Sensor_Short_Name.length)) exceeds 15 char\"\n    }\n    $JSON.poco.Measurement_Type_CD = if ($data.Measurement_Type_CD) {\n        [int]$data.Measurement_Type_CD\n    }\n    else {\n        ($Measurement_Types | Where-Object {\n                $_.Measurement_Name -eq $data.Measurement_Type\n            }).Measurement_Type_CD\n        \n    }\n    if ($JSON.poco.Measurement_Type_CD -eq $Null){\n        Write-Host -ForegroundColor Yellow \"Error: unable to match measurement type: $($data.Measurement_Type)\"\n        Write-Error \"Error: unable to match measurement type: $($data.Measurement_Type)\"\n    }\n    $JSON.poco.Last_Update_date = \"$([System.DateTime]::UtcNow.GetDateTimeFormats(\"O\"))\"\n    $JSON.poco.Is_Deleted = [System.Convert]::ToBoolean($data.Is_Deleted)\n    $JSON.poco.Is_Critical = [System.Convert]::ToBoolean($data.Is_Critical)\n    $JSON.poco.Rounding_Precision = $data.Rounding_Precision\n    $JSON.poco.Deadband_Percentage = if ($data.Deadband_Percentage -eq \"NULL\") {$null}else {$data.Deadband_Percentage}\n    $JSON.poco.External_Tag_Format = if ($data.External_Tag_Format -eq \"NULL\") {$null}else {$data.External_Tag_Format}\n    $JSON.poco.Disable_History = [System.Convert]::ToBoolean($data.Disable_History)\n    $JSON.poco.Setpoint_Timeout_Seconds = if ($data.Setpoint_Timeout_Seconds -eq \"NULL\") {$null}else {$data.Setpoint_Timeout_Seconds}\n    $JSON.poco.Sensor_Category_Type_CD = if ($data.Sensor_Category_Type_CD -eq \"NULL\") {$null}else {$data.Sensor_Category_Type_CD}\n    $JSON.poco.Description = if ($data.Description -eq \"NULL\") {$null}else {$data.Description}\n    $JSON.poco.IsNew = $IsNew\n\n    $params = @{\n        Uri         = $URI\n        Method      = \"Post\"\n        Body        = ($JSON | ConvertTo-Json)\n        ContentType = \"application/json; charset=utf-8\"\n        ErrorAction = \"Inquire\"\n    }\n\n    Invoke-RestMethod @params\n}\n\nExport-ModuleMember SetSensorType\n\nFunction AddDeviceType ($data, $config, $user) {\n    #To do add logic to determine if sensor type cd is present in template\n    $service = $config.DeviceMethod\n    $method = \"AddDeviceType\"\n    #Set Rest connection params\n    $URI = \"$($config.WebHost)/$($service)$($method)\"\n    $JSON = $config.JSONAddDeviceType\n    $JSON.Ticket = $user.Ticket\n    $JSON.LoginID = $user.Login_ID\n    $JSON.Environment = $config.Environment\n    $JSON.AppID = $config.AppID\n    #Set Poco properties from template\n    $JSON.poco.Device_Type_Name = $data.Device_Type\n    $JSON.poco.Device_Type_Short_Name = $data.Device_Type_Short\n    $JSON.poco.Last_Updated_By = $user.Login_ID\n    $JSON.poco.Last_Update_date = \"$([System.DateTime]::UtcNow.GetDateTimeFormats(\"O\"))\"\n    $JSON.poco.Is_Deleted = [System.Convert]::ToBoolean($data.Is_Deleted)\n    $JSON.poco.Description = if ($data.Description -eq \"NULL\") {$null}else {$data.Description}\n\n    $params = @{\n        Uri         = $URI\n        Method      = \"Post\"\n        Body        = ($JSON | ConvertTo-Json)\n        ContentType = \"application/json; charset=utf-8\"\n        ErrorAction = \"Inquire\"\n    }\n\n    Invoke-RestMethod @params\n}\n\nExport-ModuleMember AddDeviceType\n\nFunction GetDeviceSensors ($config, $user, $deviceID) {\n    $Service = $config.DeviceMethod\n    $Method = \"SELECT_858\"\n    $URI = \"$($config.WebHost)/$($service)$($method)\"\n    $JSON = $config.JSONSelectMethod\n    $JSON.Ticket = $user.Ticket\n    $JSON.LoginID = $user.Login_ID\n    $JSON.Environment = $config.Environment\n    $JSON.AppID = $config.AppID\n    $JSON | Add-Member -NotePropertyName \"deviceID\" -NotePropertyValue $deviceID -Force\n\n    $params = @{\n        Uri         = $URI\n        Method      = \"Post\"\n        Body        = ($JSON | ConvertTo-Json)\n        ContentType = \"application/json; charset=utf-8\"\n        ErrorAction = \"Inquire\"\n    }\n\n    Invoke-RestMethod @params\n}\n\nExport-ModuleMember GetDeviceSensors\n\nFunction InsertSensor ($data, $config, $user, $device, $sensortype) {\n    $service = $config.DeviceMethod\n    $method = \"Device_Sensor_Insert\"\n    #Set Rest connection params\n    $URI = \"$($config.WebHost)/$($service)$($method)\"\n    $JSON = $config.JSONInsertSensor\n    $JSON.Ticket = $user.Ticket\n    $JSON.LoginID = $user.Login_ID\n    $JSON.Environment = $config.Environment\n    $JSON.AppID = $config.AppID\n    #Set Poco properties from template\n    $JSON.Device_ID = $device.Device_ID\n    $JSON.Monitor_Type_CD = ($Monitor_Types.Result | Where-Object { \n            $_.Description -eq $data.Monitor_Type \n        }).Monitor_Type_CD\n    $JSON.Sensor_Type_CD = $sensortype.Sensor_Type_CD\n    $JSON.Reading_Type_CD = ($Reading_Types.Result | Where-Object { \n            $_.Description -eq $data.Reading_Type\n        }).Reading_Type_CD\n    $JSON.Last_Updated_By = $user.Login_ID\n    $JSON.URI = \"$($data.Monitor_URL)$($data.Monitor_Server_ID)$($data.Monitor_Item_ID)\"\n    $JSON.Is_Deleted = [System.Convert]::ToBoolean($data.Is_Deleted)\n    $JSON.Polling_Interval_Seconds = if ($data.Polling -eq \"NULL\") {$null}else {$data.Polling}\n\n    $params = @{\n        Uri         = $URI\n        Method      = \"Post\"\n        Body        = ($JSON | ConvertTo-Json)\n        ContentType = \"application/json; charset=utf-8\"\n        ErrorAction = \"Inquire\"\n    }\n\n    Invoke-RestMethod @params\n}\n\nExport-ModuleMember InsertSensor\n\nFunction InsertDevice ($data, $partition, $config, $user) {\n    $service = $config.DeviceMethod\n    $method = \"Device_Insert\"\n    #Set Rest connection params\n    $URI = \"$($config.WebHost)/$($service)$($method)\"\n    $JSON = $config.JSONInsertDevice\n    $JSON.Ticket = $user.Ticket\n    $JSON.LoginID = $user.Login_ID\n    $JSON.Environment = $config.Environment\n    $JSON.AppID = $config.AppID\n    $JSON.Last_Updated_By = $user.Login_ID\n    $JSON.Is_Deleted = [System.Convert]::ToBoolean($data.Is_Deleted)\n    $JSON.Partition_ID = $data.Partition_ID\n    $JSON.Device_Type_CD = $data.Device_Type_CD\n    $JSON.Device_Up_Date = \"$([System.DateTime]::UtcNow.GetDateTimeFormats(\"O\"))\"\n    $JSON.Device_Name = $data.Device_Name\n    $JSON.Host_Name = (\n        $data.Device_Name + \n        \".\" +\n        $partition.partition_short_name +    \n        \".anywhere.corp\").Replace(\" \", \"\").ToLower()\n    \n\n    $params = @{\n        Uri         = $URI\n        Method      = \"Post\"\n        Body        = ($JSON | ConvertTo-Json)\n        ContentType = \"application/json; charset=utf-8\"\n        ErrorAction = \"Inquire\"\n    }\n\n    Invoke-RestMethod @params\n}\n\nExport-ModuleMember InsertDevice\n\nFunction DestroyDevice ($config, $user, $device, $taskid) {\n    $service = $Config.MiscMethod\n    $method = \"Task_Set\"\n    $URI = \"$($config.WebHost)/$($service)$($method)\"\n    $JSON = $config.JSONDestroyDevice\n    $JSON.Ticket = $user.Ticket\n    $JSON.LoginID = $user.Login_ID\n    $JSON.Environment = $config.Environment\n    $JSON.AppID = $config.AppID\n    $JSON.Task_ID = $taskid.guid\n    $JSON.Start_Date = \"$([System.DateTime]::UtcNow.GetDateTimeFormats(\"O\"))\"\n    $JSON.Parameter_XML = (\n        \u0027\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\u0027 + \n        \u0027\u003cEntityDestructionParameters xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\u003e\u0027 +\n        \u0027\u003cEntityTypeToDestroy\u003eDevice\u003c/EntityTypeToDestroy\u003e\u0027 +\n        \"\u003cEntityID\u003e$($Device.Device_ID)\u003c/EntityID\u003e\" +\n        \"\u003cRequestedBy\u003e$($user.Login_ID)\u003c/RequestedBy\u003e\" +\n        \u0027\u003c/EntityDestructionParameters\u003e\u0027)\n\n    $params = @{\n        Uri         = $URI\n        Method      = \"Post\"\n        Body        = ($JSON | ConvertTo-Json)\n        ContentType = \"application/json; charset=utf-8\"\n        ErrorAction = \"Inquire\"\n    }\n\n    Invoke-RestMethod @params\n}\n\nExport-ModuleMember DestroyDevice\n\nFunction DestroySensor ($config, $user, $sensor, $taskid) {\n    $service = $Config.MiscMethod\n    $method = \"Task_Set\"\n    $URI = \"$($config.WebHost)/$($service)$($method)\"\n    $JSON = $config.JSONDestroyDevice\n    $JSON.Ticket = $user.Ticket\n    $JSON.LoginID = $user.Login_ID\n    $JSON.Environment = $config.Environment\n    $JSON.AppID = $config.AppID\n    $JSON.Task_ID = $taskid.guid\n    $JSON.Start_Date = \"$([System.DateTime]::UtcNow.GetDateTimeFormats(\"O\"))\"\n    $JSON.Parameter_XML = (\n        \u0027\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\u0027 + \n        \u0027\u003cEntityDestructionParameters xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\u003e\u0027 +\n        \u0027\u003cEntityTypeToDestroy\u003eSensor\u003c/EntityTypeToDestroy\u003e\u0027 +\n        \"\u003cEntityID\u003e$($sensor)\u003c/EntityID\u003e\" +\n        \"\u003cRequestedBy\u003e$($user.Login_ID)\u003c/RequestedBy\u003e\" +\n        \u0027\u003c/EntityDestructionParameters\u003e\u0027)\n\n    $params = @{\n        Uri         = $URI\n        Method      = \"Post\"\n        Body        = ($JSON | ConvertTo-Json)\n        ContentType = \"application/json; charset=utf-8\"\n        ErrorAction = \"Inquire\"\n    }\n\n    Invoke-RestMethod @params\n}\n\nExport-ModuleMember DestroySensor\n\n\nFunction TaskProgress ($config, $user, $taskid) {\n    $service = $Config.MiscMethod\n    $method = \"Task_Progress_Set\"\n    $URI = \"$($config.WebHost)/$($service)$($method)\"\n    $JSON = $config.JSONTaskProgressSet\n    $JSON.Ticket = $user.Ticket\n    $JSON.LoginID = $user.Login_ID\n    $JSON.Environment = $config.Environment\n    $JSON.AppID = $config.AppID\n    $JSON.Task_ID = $taskid.guid\n    $JSON.Progress_Date = \"$([System.DateTime]::UtcNow.GetDateTimeFormats(\"O\"))\"\n\n    $params = @{\n        Uri         = $URI\n        Method      = \"Post\"\n        Body        = ($JSON | ConvertTo-Json)\n        ContentType = \"application/json; charset=utf-8\"\n        ErrorAction = \"Inquire\"\n    }\n\n    Invoke-RestMethod @params\n}\n\nExport-ModuleMember TaskProgress\n\nFunction GetTask ($config, $user, $taskid) {\n    $service = $config.MiscMethod\n    $method = \"Task_Get\"\n    $URI = \"$($config.WebHost)/$($service)$($method)\"\n    $JSON = $config.JSONSelectMethod\n    $JSON.Ticket = $user.Ticket\n    $JSON.LoginID = $user.Login_ID\n    $JSON.Environment = $config.Environment\n    $JSON.AppID = $config.AppID\n    $JSON | Add-Member Task_ID($taskid.guid) -Force\n\n    $params = @{\n        Uri         = $URI\n        Method      = \"Post\"\n        Body        = ($JSON | ConvertTo-Json)\n        ContentType = \"application/json; charset=utf-8\"\n        ErrorAction = \"Inquire\"\n    }\n\n    Invoke-RestMethod @params\n}\n\nExport-ModuleMember GetTask\n\n\n\n\n\n",
    "ConfigTemplate":  "{\"PSModule\": {\r\n        \"Repository\": \"http://www.powershellgallery.com\",\r\n        \"Modules\": [\r\n            \"PowerShellGet\",\r\n            \"Invoke-SqlCmd2\",\r\n            \"PSObjectifier\"\r\n        ]\r\n    }}"
}
